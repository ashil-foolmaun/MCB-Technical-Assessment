--FUNCTION TO CONVERT DATE FORMAT TO A UNIFORM ONE 

create or replace FUNCTION VALIDATE_DATE(r_INPUT IN VARCHAR2)
        RETURN DATE IS 
           r_OUTPUT VARCHAR2(50);
           r_OUTPUT_date DATE;
        BEGIN
          r_OUTPUT := r_INPUT;
          r_OUTPUT := REPLACE( r_OUTPUT, '-01-','-JAN-');
          r_OUTPUT := REPLACE( r_OUTPUT, '-02-','-FEB-');
          r_OUTPUT := REPLACE( r_OUTPUT, '-03-','-MAR-');
          r_OUTPUT := REPLACE( r_OUTPUT, '-04-','-APR-');
          r_OUTPUT := REPLACE( r_OUTPUT, '-05-','-MAY-');
          r_OUTPUT := REPLACE( r_OUTPUT, '-06-','-JUN-');
          r_OUTPUT := REPLACE( r_OUTPUT, '-07-','-JUL-');
          r_OUTPUT := REPLACE( r_OUTPUT, '-08-','-AUG-');
          r_OUTPUT := REPLACE( r_OUTPUT, '-09-','-SEP-');
          r_OUTPUT := REPLACE( r_OUTPUT, '-10-','-OCT-');
          r_OUTPUT := REPLACE( r_OUTPUT, '-11-','-NOV-');
          r_OUTPUT := REPLACE( r_OUTPUT, '-12-','-DEC-');
          r_OUTPUT_date := TO_DATE(r_OUTPUT,'DD-MON-YYYY');
          RETURN r_OUTPUT;
        END;

/

--FUNCTION TO ELIMINATE/CONVERT INVALID CHARACTERS FROM NUMERIC VALUE

create or replace FUNCTION VALIDATE_NUMBER(r_INPUT IN VARCHAR2)
        RETURN NUMBER IS 
           r_OUTPUT VARCHAR2(50);
           r_OUTPUT_num number(10);
        BEGIN
          r_OUTPUT := NVL(r_INPUT,'0');
          r_OUTPUT := TRANSLATE( r_OUTPUT, 'oOiIlsS ,', '0011155' );
          r_OUTPUT_num := TO_NUMBER(r_OUTPUT);
          RETURN r_OUTPUT_num;
        END;                 
      
/

--FUNCTION TO ELIMINATE/CONVERT INVALID CHARACTERS FROM PHONENUMBERS

create or replace FUNCTION VALIDATE_PHONENUMBER(r_INPUT IN VARCHAR2)
    RETURN VARCHAR2 IS 
       r_OUTPUT VARCHAR2(50);
        BEGIN
          r_OUTPUT := NVL(r_INPUT,'');
          r_OUTPUT := TRANSLATE( r_OUTPUT, 'oO .', '00' );
          RETURN r_OUTPUT;
        END; 
		
/

--MIGRATION PROCEDURE TO INSERT/UPDATE IN NORMALIZED TABLES

create or replace procedure bcm_db_migration AS
    BEGIN

    MERGE INTO XXBCM_CONTACT M
    USING (
    SELECT DISTINCT SUPP_CONTACT_NAME, SUPP_ADDRESS, VALIDATE_PHONENUMBER(SUPP_CONTACT_NUMBER) AS SUPP_CONTACT_NUMBER, SUPP_EMAIL
    FROM XXBCM_ORDER_MGT 
    ) M1 ON (
    M.SUPP_CONTACT_NAME = M1.SUPP_CONTACT_NAME
    AND  M.SUPP_ADDRESS = M1.SUPP_ADDRESS
    AND  M.SUPP_CONTACT_NUMBER = M1.SUPP_CONTACT_NUMBER
    AND M.SUPP_EMAIL = M1.SUPP_EMAIL
    )
    WHEN NOT MATCHED THEN INSERT (
    M.SUPP_CONTACT_NAME,
    M.SUPP_ADDRESS,
    M.SUPP_CONTACT_NUMBER,
    M.SUPP_EMAIL
    ) VALUES (
    M1.SUPP_CONTACT_NAME,
    M1.SUPP_ADDRESS,
    M1.SUPP_CONTACT_NUMBER,
    M1.SUPP_EMAIL
    );
    COMMIT;

    MERGE INTO XXBCM_SUPPLIER N
    USING (
    SELECT DISTINCT y.CONTACT_ID, x.SUPPLIER_NAME
    FROM XXBCM_ORDER_MGT x
    INNER JOIN  XXBCM_CONTACT y ON x.SUPP_CONTACT_NAME = y.SUPP_CONTACT_NAME AND x.SUPP_ADDRESS = y.SUPP_ADDRESS AND VALIDATE_PHONENUMBER(x.SUPP_CONTACT_NUMBER)= y.SUPP_CONTACT_NUMBER AND x.SUPP_EMAIL = y.SUPP_EMAIL
    ) N1 ON (
    N.SUPPLIER_NAME = N1.SUPPLIER_NAME
    )
    WHEN NOT MATCHED THEN INSERT (
    N.CONTACT_ID,
    N.SUPPLIER_NAME
    ) VALUES (
    N1.CONTACT_ID,
    N1.SUPPLIER_NAME
    );
    COMMIT;

    MERGE INTO XXBCM_ORDER O
    USING (
    SELECT DISTINCT y.SUPPLIER_ID, x.ORDER_REF, VALIDATE_DATE(x.ORDER_DATE) AS ORDER_DATE,VALIDATE_NUMBER(x.ORDER_TOTAL_AMOUNT) AS ORDER_TOTAL_AMOUNT, x.ORDER_DESCRIPTION, x.ORDER_STATUS, VALIDATE_NUMBER(x.ORDER_LINE_AMOUNT) AS ORDER_LINE_AMOUNT
    FROM XXBCM_ORDER_MGT x  
    INNER JOIN  XXBCM_SUPPLIER y ON x.SUPPLIER_NAME = y.SUPPLIER_NAME
    ) O1 ON (
    O.ORDER_REF = O1.ORDER_REF
    AND O.ORDER_DATE = O1.ORDER_DATE
    AND O.ORDER_TOTAL_AMOUNT = O1.ORDER_TOTAL_AMOUNT
    AND O.ORDER_DESCRIPTION = O1.ORDER_DESCRIPTION
    AND O.ORDER_STATUS = O1.ORDER_STATUS
    AND O.ORDER_LINE_AMOUNT = O1.ORDER_LINE_AMOUNT
    )
    WHEN NOT MATCHED THEN INSERT (
    O.SUPPLIER_ID,
    O.ORDER_REF,
    O.ORDER_DATE,
    O.ORDER_TOTAL_AMOUNT,
    O.ORDER_DESCRIPTION,
    O.ORDER_STATUS,
    O.ORDER_LINE_AMOUNT
    ) VALUES (
    O1.SUPPLIER_ID,
    O1.ORDER_REF,
    O1.ORDER_DATE,
    O1.ORDER_TOTAL_AMOUNT,
    O1.ORDER_DESCRIPTION,
    O1.ORDER_STATUS,
    O1.ORDER_LINE_AMOUNT
    );
    COMMIT;

    MERGE INTO XXBCM_INVOICE P
    USING (
    SELECT DISTINCT y.ORDER_ID, x.INVOICE_REFERENCE, VALIDATE_DATE(x.INVOICE_DATE) AS INVOICE_DATE, x.INVOICE_STATUS, x.INVOICE_HOLD_REASON, VALIDATE_NUMBER(x.INVOICE_AMOUNT) AS INVOICE_AMOUNT, INVOICE_DESCRIPTION
    FROM XXBCM_ORDER_MGT x
    INNER JOIN  XXBCM_ORDER y ON x.ORDER_REF = y.ORDER_REF AND VALIDATE_DATE(x.ORDER_DATE) = y.ORDER_DATE AND VALIDATE_NUMBER(x.ORDER_TOTAL_AMOUNT) = y.ORDER_TOTAL_AMOUNT AND x.ORDER_DESCRIPTION = y.ORDER_DESCRIPTION AND
    x.ORDER_STATUS = y.ORDER_STATUS AND VALIDATE_NUMBER(x.ORDER_LINE_AMOUNT) = y.ORDER_LINE_AMOUNT
    )
    P1 ON (
    P.INVOICE_REFERENCE = P1.INVOICE_REFERENCE
    AND P.INVOICE_DATE = P1.INVOICE_DATE
    AND P.INVOICE_STATUS = P1.INVOICE_STATUS
    AND P.INVOICE_HOLD_REASON = P1.INVOICE_HOLD_REASON
    AND P.INVOICE_AMOUNT = P1.INVOICE_AMOUNT
    AND P.INVOICE_DESCRIPTION = P1.INVOICE_DESCRIPTION
    )
    WHEN NOT MATCHED THEN INSERT (
    P.ORDER_ID,
    P.INVOICE_REFERENCE,
    P.INVOICE_DATE,
    P.INVOICE_STATUS,
    P.INVOICE_HOLD_REASON,
    P.INVOICE_AMOUNT,
    P.INVOICE_DESCRIPTION
    ) VALUES (
    P1.ORDER_ID,
    P1.INVOICE_REFERENCE,
    P1.INVOICE_DATE,
    P1.INVOICE_STATUS,
    P1.INVOICE_HOLD_REASON,
    P1.INVOICE_AMOUNT,
    P1.INVOICE_DESCRIPTION
    );
    COMMIT;

    END;
/
